//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class MMotionPlanRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/MotionPlanRequest";

        //  This service contains the definition for a request to the motion
        //  planner and the output it provides
        //  Parameters for the workspace that the planner should work inside
        public MWorkspaceParameters workspace_parameters;
        //  Starting state updates. If certain joints should be considered
        //  at positions other than the current ones, these positions should
        //  be set here
        public MRobotState start_state;
        //  The possible goal states for the model to plan for. Each element of
        //  the array defines a goal region. The goal is achieved
        //  if the constraints for a particular region are satisfied
        public MConstraints[] goal_constraints;
        //  No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
        public MConstraints path_constraints;
        //  The constraints the resulting trajectory must satisfy
        public MTrajectoryConstraints trajectory_constraints;
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id;
        //  The name of the group of joints on which this planner is operating
        public string group_name;
        //  The number of times this plan is to be computed. Shortest solution
        //  will be reported.
        public int num_planning_attempts;
        //  The maximum amount of time the motion planner is allowed to plan for (in seconds)
        public double allowed_planning_time;
        //  Scaling factors for optionally reducing the maximum joint velocities and
        //  accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
        //  acceleration specified in the robot model are multiplied by thier respective
        //  factors.  If either are outside their valid ranges (importantly, this
        //  includes being set to 0.0), the factor is set to the default value of 1.0
        //  internally (i.e., maximum joint velocity or maximum joint acceleration).
        public double max_velocity_scaling_factor;
        public double max_acceleration_scaling_factor;

        public MMotionPlanRequest()
        {
            this.workspace_parameters = new MWorkspaceParameters();
            this.start_state = new MRobotState();
            this.goal_constraints = new MConstraints[0];
            this.path_constraints = new MConstraints();
            this.trajectory_constraints = new MTrajectoryConstraints();
            this.planner_id = "";
            this.group_name = "";
            this.num_planning_attempts = 0;
            this.allowed_planning_time = 0.0;
            this.max_velocity_scaling_factor = 0.0;
            this.max_acceleration_scaling_factor = 0.0;
        }

        public MMotionPlanRequest(MWorkspaceParameters workspace_parameters, MRobotState start_state, MConstraints[] goal_constraints, MConstraints path_constraints, MTrajectoryConstraints trajectory_constraints, string planner_id, string group_name, int num_planning_attempts, double allowed_planning_time, double max_velocity_scaling_factor, double max_acceleration_scaling_factor)
        {
            this.workspace_parameters = workspace_parameters;
            this.start_state = start_state;
            this.goal_constraints = goal_constraints;
            this.path_constraints = path_constraints;
            this.trajectory_constraints = trajectory_constraints;
            this.planner_id = planner_id;
            this.group_name = group_name;
            this.num_planning_attempts = num_planning_attempts;
            this.allowed_planning_time = allowed_planning_time;
            this.max_velocity_scaling_factor = max_velocity_scaling_factor;
            this.max_acceleration_scaling_factor = max_acceleration_scaling_factor;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(workspace_parameters.SerializationStatements());
            listOfSerializations.AddRange(start_state.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(goal_constraints.Length));
            foreach(var entry in goal_constraints)
                listOfSerializations.Add(entry.Serialize());
            listOfSerializations.AddRange(path_constraints.SerializationStatements());
            listOfSerializations.AddRange(trajectory_constraints.SerializationStatements());
            listOfSerializations.Add(SerializeString(this.planner_id));
            listOfSerializations.Add(SerializeString(this.group_name));
            listOfSerializations.Add(BitConverter.GetBytes(this.num_planning_attempts));
            listOfSerializations.Add(BitConverter.GetBytes(this.allowed_planning_time));
            listOfSerializations.Add(BitConverter.GetBytes(this.max_velocity_scaling_factor));
            listOfSerializations.Add(BitConverter.GetBytes(this.max_acceleration_scaling_factor));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.workspace_parameters.Deserialize(data, offset);
            offset = this.start_state.Deserialize(data, offset);
            
            var goal_constraintsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.goal_constraints= new MConstraints[goal_constraintsArrayLength];
            for(var i = 0; i < goal_constraintsArrayLength; i++)
            {
                this.goal_constraints[i] = new MConstraints();
                offset = this.goal_constraints[i].Deserialize(data, offset);
            }
            offset = this.path_constraints.Deserialize(data, offset);
            offset = this.trajectory_constraints.Deserialize(data, offset);
            var planner_idStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.planner_id = DeserializeString(data, offset, planner_idStringBytesLength);
            offset += planner_idStringBytesLength;
            var group_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.group_name = DeserializeString(data, offset, group_nameStringBytesLength);
            offset += group_nameStringBytesLength;
            this.num_planning_attempts = BitConverter.ToInt32(data, offset);
            offset += 4;
            this.allowed_planning_time = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.max_velocity_scaling_factor = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.max_acceleration_scaling_factor = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MMotionPlanRequest: " +
            "\nworkspace_parameters: " + workspace_parameters.ToString() +
            "\nstart_state: " + start_state.ToString() +
            "\ngoal_constraints: " + System.String.Join(", ", goal_constraints.ToList()) +
            "\npath_constraints: " + path_constraints.ToString() +
            "\ntrajectory_constraints: " + trajectory_constraints.ToString() +
            "\nplanner_id: " + planner_id.ToString() +
            "\ngroup_name: " + group_name.ToString() +
            "\nnum_planning_attempts: " + num_planning_attempts.ToString() +
            "\nallowed_planning_time: " + allowed_planning_time.ToString() +
            "\nmax_velocity_scaling_factor: " + max_velocity_scaling_factor.ToString() +
            "\nmax_acceleration_scaling_factor: " + max_acceleration_scaling_factor.ToString();
        }
    }
}
