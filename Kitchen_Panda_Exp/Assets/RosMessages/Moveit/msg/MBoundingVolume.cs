//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class MBoundingVolume : Message
    {
        public const string RosMessageName = "moveit_msgs/BoundingVolume";

        //  Define a volume in 3D
        //  A set of solid geometric primitives that make up the volume to define (as a union)
        public Shape.MSolidPrimitive[] primitives;
        //  The poses at which the primitives are located
        public Geometry.MPose[] primitive_poses;
        //  In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
        public Shape.MMesh[] meshes;
        //  The poses at which the meshes are located
        public Geometry.MPose[] mesh_poses;

        public MBoundingVolume()
        {
            this.primitives = new Shape.MSolidPrimitive[0];
            this.primitive_poses = new Geometry.MPose[0];
            this.meshes = new Shape.MMesh[0];
            this.mesh_poses = new Geometry.MPose[0];
        }

        public MBoundingVolume(Shape.MSolidPrimitive[] primitives, Geometry.MPose[] primitive_poses, Shape.MMesh[] meshes, Geometry.MPose[] mesh_poses)
        {
            this.primitives = primitives;
            this.primitive_poses = primitive_poses;
            this.meshes = meshes;
            this.mesh_poses = mesh_poses;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            
            listOfSerializations.Add(BitConverter.GetBytes(primitives.Length));
            foreach(var entry in primitives)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(primitive_poses.Length));
            foreach(var entry in primitive_poses)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(meshes.Length));
            foreach(var entry in meshes)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(mesh_poses.Length));
            foreach(var entry in mesh_poses)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            
            var primitivesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.primitives= new Shape.MSolidPrimitive[primitivesArrayLength];
            for(var i = 0; i < primitivesArrayLength; i++)
            {
                this.primitives[i] = new Shape.MSolidPrimitive();
                offset = this.primitives[i].Deserialize(data, offset);
            }
            
            var primitive_posesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.primitive_poses= new Geometry.MPose[primitive_posesArrayLength];
            for(var i = 0; i < primitive_posesArrayLength; i++)
            {
                this.primitive_poses[i] = new Geometry.MPose();
                offset = this.primitive_poses[i].Deserialize(data, offset);
            }
            
            var meshesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.meshes= new Shape.MMesh[meshesArrayLength];
            for(var i = 0; i < meshesArrayLength; i++)
            {
                this.meshes[i] = new Shape.MMesh();
                offset = this.meshes[i].Deserialize(data, offset);
            }
            
            var mesh_posesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.mesh_poses= new Geometry.MPose[mesh_posesArrayLength];
            for(var i = 0; i < mesh_posesArrayLength; i++)
            {
                this.mesh_poses[i] = new Geometry.MPose();
                offset = this.mesh_poses[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "MBoundingVolume: " +
            "\nprimitives: " + System.String.Join(", ", primitives.ToList()) +
            "\nprimitive_poses: " + System.String.Join(", ", primitive_poses.ToList()) +
            "\nmeshes: " + System.String.Join(", ", meshes.ToList()) +
            "\nmesh_poses: " + System.String.Join(", ", mesh_poses.ToList());
        }
    }
}
